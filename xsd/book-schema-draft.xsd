<?xml version="1.0" encoding="UTF-8"?>
<xs:schema 
    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
    elementFormDefault="qualified"
    attributeFormDefault="unqualified">


    <!-- Simple types to use in the content -->
    <xs:simpleType name="token255">
        <xs:annotation>
            <xs:documentation>Defines a token of no more than 255 characters</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:maxLength value="255"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="ISBN-type10">
        <xs:annotation>
            <xs:documentation>
                A much longer and tedious type definition available at http://xfront.com/isbn.html
                
                It includes country specific ISBN derivations
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="0-[0-1][0-9]-\d{6}-[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 0 (hyphen after the 1st digit)
                        Publisher ID = 00...19 (hyphen after the 3rd digit)
                        Block size = 1,000,000 (requires 6 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="0\s[0-1][0-9]\s\d{6}\s[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 0 (space after the 1st digit)
                        Publisher ID = 00...19 (space after the 3rd digit)
                        Block size = 1,000,000 (requires 6 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="0-[2-6][0-9]{2}-\d{5}-[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 0 (hyphen after the 1st digit)
                        Publisher ID = 200...699 (hyphen after the 4th digit)
                        Block size = 100,000 (requires 5 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="0\s[2-6][0-9]{2}\s\d{5}\s[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 0 (space after the 1st digit)
                        Publisher ID = 200...699 (space after the 4th digit)
                        Block size = 100,000 (requires 5 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="0-(7[0-9]{3}|8[0-4][0-9]{2})-\d{4}-[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 0 (hyphen after the 1st digit)
                        Publisher ID = 7000...8499 (hyphen after the 5th digit)
                        Block size = 10,000 (requires 4 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="0\s(7[0-9]{3}|8[0-4][0-9]{2})\s\d{4}\s[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 0 (space after the 1st digit)
                        Publisher ID = 7000...8499 (space after the 5th digit)
                        Block size = 10,000 (requires 4 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="0-8[5-9][0-9]{3}-\d{3}-[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 0 (hyphen after the 1st digit)
                        Publisher ID = 85000...89999 (hyphen after the 6th digit)
                        Block size = 1,000 (requires 3 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="0\s8[5-9][0-9]{3}\s\d{3}\s[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 0 (space after the 1st digit)
                        Publisher ID = 85000...89999 (space after the 6th digit)
                        Block size = 1,000 (requires 3 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="0-9[0-4][0-9]{4}-\d{2}-[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 0 (hyphen after the 1st digit)
                        Publisher ID = 900000...949999 (hyphen after the 7th digit)
                        Block size = 100 (requires 2 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="0\s9[0-4][0-9]{4}\s\d{2}\s[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 0 (space after the 1st digit)
                        Publisher ID = 900000...949999 (space after the 7th digit)
                        Block size = 100 (requires 2 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="0-9[5-9][0-9]{5}-\d-[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 0 (hyphen after the 1st digit)
                        Publisher ID = 9500000...9999999 (hyphen after the 8th digit)
                        Block size = 10 (requires 1 digit)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="0\s9[5-9][0-9]{5}\s\d\s[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 0 (space after the 1st digit)
                        Publisher ID = 9500000...9999999 (space after the 8th digit)
                        Block size = 10 (requires 1 digit)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="1-(55[0-9]{3}|[6-7][0-9]{4}|8[0-6][0-8][0-9]{2}|869[0-7][0-9])-\d{3}-[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 1 (hyphen after the 1st digit)
                        Publisher ID = 55000...86979 (hyphen after the 6th digit)
                        Block size = 1,000 (requires 3 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="1\s(55[0-9]{3}|[6-7][0-9]{4}|8[0-6][0-8][0-9]{2}|869[0-7][0-9])\s\d{3}\s[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 1 (space after the 1st digit)
                        Publisher ID = 55000...86979 (space after the 6th digit)
                        Block size = 1,000 (requires 3 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="1-(8698[0-9]{2}|8[7-9][0-9]{4}|9[0-8][0-9]{4}|99[0-8][0-9]{3})-\d{2}-[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 1 (hyphen after the 1st digit)
                        Publisher ID = 869800...998999 (hyphen after the 7th digit)
                        Block size = 100 (requires 2 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="1\s(8698[0-9]{2}|8[7-9][0-9]{4}|9[0-8][0-9]{4}|99[0-8][0-9]{3})\s\d{2}\s[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 1 (space after the 1st digit)
                        Publisher ID = 869800...998999 (space after the 7th digit)
                        Block size = 100 (requires 2 digits)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="1-999[0-9]{4}-\d-[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 1 (hyphen after the 1st digit)
                        Publisher ID = 9990000...9999999 (hyphen after the 8th digit)
                        Block size = 10 (requires 1 digit)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
            <xs:pattern value="1\s999[0-9]{4}\s\d\s[0-9x]">
                <xs:annotation>
                    <xs:documentation>
                        group/country ID = 1 (space after the 1st digit)
                        Publisher ID = 9990000...9999999 (space after the 8th digit)
                        Block size = 10 (requires 1 digit)
                        check digit is 0-9 or 'x'
                    </xs:documentation>
                </xs:annotation>
            </xs:pattern>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="align">
        <xs:annotation>
            <xs:documentation>Attribute ennumeration for elements that can be aligned</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="left"/>
            <xs:enumeration value="center"/>
            <xs:enumeration value="right"/>
            <xs:enumeration value="justify"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:attributeGroup name="genericPropertiesGroup">
        <xs:attribute name="id" type="xs:ID" use="optional">
            <xs:annotation>
                <xs:documentation>ID for the paragraph if any</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="class" type="xs:token" use="optional">
            <xs:annotation>
                <xs:documentation>Class for the paragraph if any</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup> 

    <!-- complex types to create groups of similar person items -->
    <xs:complexType name="person">
        <xs:annotation>
            <xs:documentation>
                Generic element to denote an individual involved in creating the book
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="first-name" type="xs:token"/>
            <xs:element name="surname" type="xs:token"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID" use="optional"/>
    </xs:complexType>
    
    <xs:complexType name="author">
        <xs:annotation>
            <xs:documentation>
                Author person
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="person">
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="editor">
        <xs:annotation>
            <xs:documentation>extension to person to indicate editor and his/her role</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="person">
                <xs:choice>
                    <xs:element name="type" type="xs:token"/>
                </xs:choice>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="otherRole">
        <xs:annotation>
            <xs:documentation>extension to person to accomodate roles other than author and editor</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="person">
                <xs:sequence minOccurs="1" maxOccurs="1">
                    <xs:element name="role" type="xs:token"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Creating wrappers around complext types --> 
    <xs:element name="authors">
        <xs:annotation>
            <xs:documentation>
                One or more authors
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="1" maxOccurs="unbounded">
                <xs:element name="author" type="author"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <xs:element name="editors">
        <xs:annotation>
            <xs:documentation>
                One or more editors
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element name="editor" type="editor"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="otherRoles">
        <xs:annotation>
            <xs:documentation>
                One or more people in other roles
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
                <xs:element name="otherRole" type="otherRole"></xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <!-- Elements inside section -->
    <xs:element name="link">
        <xs:annotation>
            <xs:documentation>links... </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="href" type="xs:anyURI" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Link destination. Attribute is required
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="label" type="xs:token" use="required">
                <xs:annotation>
                    <xs:documentation>Text provided for accessibility</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="image">
        <xs:annotation>
            <xs:documentation>image and image-related attributes</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="src" type="xs:token" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Source for the image. We may want to create a restriction to account for both local and remote addresses
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="height" type="xs:nonNegativeInteger" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Height for the image expressed as a positive integer
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="width" type="xs:nonNegativeInteger" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Width for the image expressed as a positive integer
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>            
            <xs:attribute name="alt" type="token255" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Alternate text contstained to 255 characters
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="align" type="align" use="optional" default="left">
                <xs:annotation>
                    <xs:documentation>
                        Optional alignment
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="strong">
        <xs:annotation>
            <xs:documentation>
                The strong element can have 0 or more children chosen form: emphasis, underline and span
                
                Nested strong elements are not allowed
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="emphasis"/>
                <xs:element ref="underline"/>
                <xs:element ref="strike"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <xs:element name="emphasis">
        <xs:annotation>
            <xs:documentation>
                The emphasis element can have 0 or more children chosen form: strong, emphasis, underline and span
                
                Nested emphasis elements ARE allowed. Emphasis inside emphasis cancels out and displays as normal text

            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="strong"/>
                <xs:element ref="emphasis"/>
                <xs:element ref="underline"/>
                <xs:element ref="strike"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
     
    <xs:element name="underline">
        <xs:annotation>
            <xs:documentation>
                The underline element can have 0 or more children chosen form: strong, emphasis, underline and span
                
                Nested underline elements are not allowed
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="strong"/>
                <xs:element ref="emphasis"/>
                <xs:element ref="strike"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <xs:element name="strike">
        <xs:annotation>
            <xs:documentation>
                The strike element can have 0 or more children chosen form: strong, emphasis, underline and span
                
                Nested strike elements are not allowed.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="strong"/>
                <xs:element ref="emphasis"/>
                <xs:element ref="underline"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <xs:element name="ulist">
        <xs:annotation>
            <xs:documentation>
                Unordered list
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="1" maxOccurs="unbounded">
                <xs:element name="item">
                    <xs:complexType>
                        <xs:attributeGroup ref="genericPropertiesGroup"/>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="olist">
        <xs:annotation>
            <xs:documentation>
                Ordered list
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="1" maxOccurs="unbounded">
                <xs:element name="item">
                    <xs:complexType>
                        <xs:attributeGroup ref="genericPropertiesGroup"/>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="code">
        <xs:annotation>
            <xs:documentation>
                Code is used to generate fenced code blocks (see Github rendered markdown code 
                for an idea of how I want this to look). 
                
                When using CSS we'll generate a <code><pre></pre></code> block with a language attribute
                that will be formated with either Google Code Prettify or Highlight.js (the chosen
                package will be a part of the tool chain)
                
                Because of the intended use, the language attribute is required. 
                
                Class and ID (from genericPropertiesGroup) are optional
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="language" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="para">
        <xs:annotation>
            <xs:documentation>Para is the essential text content element. It'll get hairy because we
                have a lot of possible attributes we can use on it</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice  minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        Style, Link and Span Elements. 
                        
                        We use strong and emphasis rather than bold and italics
                        to try and stay in synch with HTML and HTML5. We may add additional tags
                        later in the process.
                        
                        We can use any of these elements inside paragraph in no particular order 
                        0 or more times (no maximum)
                        
                        Researching how to handle nested styles and whether the model below 
                        would handle nested children
                    </xs:documentation>
                </xs:annotation>
                <xs:element ref="strong"/>
                <xs:element ref="emphasis"/>
                <xs:element ref="underline"/>
                <xs:element ref="strike"/>
                <xs:element ref="link"/>
            </xs:choice>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
        </xs:complexType>
    </xs:element>

    <!-- Headings -->
    <xs:element name="h1">
        <xs:annotation>
            <xs:documentation>
                Level 1 heading. Name taken form html
                
                The element has the following attributes:
                
                * Class
                * ID
                * Align (center, left, right)
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="align" type="align" use="optional" default="left"/>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="h2">
        <xs:annotation>
            <xs:documentation>
                Level 3 heading. Name taken form html
                
                The element has the following attributes:
                
                * Class
                * ID
                * Align (center, left, right)
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="align" type="align" use="optional" default="left"/>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="h3">
        <xs:annotation>
            <xs:documentation>
                Level 3 heading. Name taken form html
                
                The element has the following attributes:
                
                * Class
                * ID
                * Align (center, left, right)
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="align" type="align" use="optional" default="left"/>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="h4">
        <xs:annotation>
            <xs:documentation>
                Level 4 heading. Name taken form html
                
                The element has the following attributes:
                
                * Class
                * ID
                * Align (center, left, right)
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="align" type="align" use="optional" default="left"/>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="h5">
        <xs:annotation>
            <xs:documentation>
                Level 5 heading. Name taken form html
                
                The element has the following attributes:
                
                * Class
                * ID
                * Align (center, left, right)
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="align" type="align" use="optional" default="left"/>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="h6">
        <xs:annotation>
            <xs:documentation>
                Level 6 heading. Name taken form html                
                
                The element has the following attributes:
                
                * Class
                * ID
                * Align (center, left, right)
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="align" type="align" use="optional" default="left"/>
        </xs:complexType>
    </xs:element>
    
    <!-- Metadata element -->
    <xs:element name="metadata">
        <xs:annotation>
            <xs:documentation>Metadata section of the content. Still debating whether to move it inside section or leave it as a separate part.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>Metadata choice using ISBN, Edition, Title, Authors, Editors and Other Roles defined using simple and complex type definitions defined earlier</xs:documentation>
                </xs:annotation>
                <xs:element name="isbn" type="ISBN-type10"/>
                <xs:element name="edition" type="xs:integer"/>
                <xs:element name="title" type="token255"/>
                <xs:element ref="authors"/>
                <xs:element ref="editors"/>
                <xs:element ref="otherRoles"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <!-- Section element -->
    <xs:element name="section">
        <xs:annotation>
            <xs:documentation>section structure</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence>
                <xs:annotation>
                    <xs:documentation>A title and at least one paragraph </xs:documentation>
                </xs:annotation>
                <xs:element name="title" type="xs:token" minOccurs="1" maxOccurs="1"/>
                <xs:choice maxOccurs="unbounded">
                    <xs:element ref="image"/>
                    <xs:element ref="code"/>
                    <xs:element ref="para" minOccurs="1" maxOccurs="unbounded"/>
                    <xs:element ref="ulist"/>
                    <xs:element ref="olist"/>
                </xs:choice>
            </xs:sequence>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="type" type="xs:token" use="optional" default="chapter">
                <xs:annotation>
                    <xs:documentation>
                        The type or role for the paragraph asn in data-role or epub:type. 
                        
                        We make it optional but provide a default of chapter to make it 
                        easier to add.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <!-- Base book element -->
    <xs:element name="book">
        <xs:annotation>
            <xs:documentation>The main book element and it's children</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:annotation>
                <xs:documentation>A sequence of one metadata section followed by 1 or more sections</xs:documentation>
            </xs:annotation>
            <xs:sequence>
                <xs:element ref="metadata" minOccurs="1" maxOccurs="1"/>
                <xs:element ref="section" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
        </xs:complexType>
    </xs:element>
</xs:schema>