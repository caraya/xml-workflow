<?xml version="1.0" encoding="UTF-8"?>
<xs:schema 
    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
    elementFormDefault="qualified"
    attributeFormDefault="unqualified">


    <!-- Simple types to use in the content -->
    <xs:simpleType name="token255">
        <xs:annotation>
            <xs:documentation>Defines a token of no more than 255 characters</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:maxLength value="255"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="isbn">
        <xs:annotation>
            <xs:documentation>Defines a regular expression to match an ISBN number. Regex needs to be refined and we need to figure out a way to account for ISBN10 and ISBN13 numbers, maybe by creating a compound element</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:unsignedLong">
            <xs:totalDigits value="10"/>
            <xs:pattern value="\d{10}"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="align">
        <xs:annotation>
            <xs:documentation>Attribute ennumeration for elements that can be aligned</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:token">
            <xs:enumeration value="left"/>
            <xs:enumeration value="center"/>
            <xs:enumeration value="right"/>
            <xs:enumeration value="justify"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:attributeGroup name="genericPropertiesGroup">
        <xs:attribute name="id" type="xs:ID" use="optional">
            <xs:annotation>
                <xs:documentation>ID for the paragraph if any</xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="class" type="xs:token" use="optional">
            <xs:annotation>
                <xs:documentation>Class for the paragraph if any</xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup> 

    <!-- complex types to create groups of similar person items -->
    <xs:complexType name="person">
        <xs:annotation>
            <xs:documentation>
                Generic element to denote an individual involved in creating the book
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="first-name" type="xs:token"/>
            <xs:element name="surname" type="xs:token"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:ID" use="optional"/>
    </xs:complexType>
    
    <xs:complexType name="authors">
        <xs:annotation>
            <xs:documentation>Wrapper to get more than one author</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="author" type="person"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="editors">
        <xs:annotation>
            <xs:documentation>extension to person to indicate editor and his/her role</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="person">
                <xs:sequence>
                    <xs:element name="type" type="xs:token"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="otherRoles">
        <xs:annotation>
            <xs:documentation>extension to person to accomodate roles other than author and editor</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="person">
                <xs:sequence>
                    <xs:element name="role" type="xs:token"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- Elements inside section -->
    <xs:element name="link">
        <xs:annotation>
            <xs:documentation>links... </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="href" type="xs:anyURI" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Link destination. Attribute is required
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="label" type="xs:token" use="required">
                <xs:annotation>
                    <xs:documentation>Text provided for accessibility</xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="image">
        <xs:annotation>
            <xs:documentation>image and image-related attributes</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="src" type="xs:token" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Source for the image. We may want to create a restriction to account for both local and remote addresses
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="height" type="xs:nonNegativeInteger" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Height for the image expressed as a positive integer
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="width" type="xs:nonNegativeInteger" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        Width for the image expressed as a positive integer
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>            
            <xs:attribute name="alt" type="token255" use="required">
                <xs:annotation>
                    <xs:documentation>
                        Alternate text contstained to 255 characters
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="align" type="align" use="optional" default="left">
                <xs:annotation>
                    <xs:documentation>
                        Optional alignment
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="strong">
        <xs:annotation>
            <xs:documentation>
                The strong element can have 0 or more children chosen form: emphasis, underline and span
                
                Nested strong elements are not allowed
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="emphasis"/>
                <xs:element ref="underline"/>
                <xs:element ref="strike"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <xs:element name="emphasis">
        <xs:annotation>
            <xs:documentation>
                The emphasis element can have 0 or more children chosen form: strong, emphasis, underline and span
                
                Nested emphasis elements ARE allowed. Emphasis inside emphasis cancels out and displays as normal text

            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="strong"/>
                <xs:element ref="emphasis"/>
                <xs:element ref="underline"/>
                <xs:element ref="strike"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>
    
    
    <xs:element name="underline">
        <xs:annotation>
            <xs:documentation>
                The emphasis element can have 0 or more children chosen form: strong, emphasis, underline and span
                
                Nested underline elements are not allowed
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="strong"/>
                <xs:element ref="emphasis"/>
                <xs:element ref="strike"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <xs:element name="strike">
        <xs:annotation>
            <xs:documentation>
                The emphasis element can have 0 or more children chosen form: strong, emphasis, underline and span
                
                Nested strike elements are not allowed.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element ref="strong"/>
                <xs:element ref="emphasis"/>
                <xs:element ref="underline"/>
            </xs:choice>
        </xs:complexType>
    </xs:element>

    <xs:element name="list">
        <xs:annotation>
            <xs:documentation>
                Ordered and unordered list
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence minOccurs="1" maxOccurs="unbounded">
                <xs:element name="item">
                    <xs:complexType>
                        <xs:attributeGroup ref="genericPropertiesGroup"/>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute name="listType" type="xs:token" default="unordered"/>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="code">
        <xs:annotation>
            <xs:documentation>
                Code is used to generate fenced code blocks (see Github rendered markdown code 
                for an idea of how I want this to look). 
                
                When using CSS we'll generate a <code><pre></pre></code> block with a language attribute
                that will be formated with either Google Code Prettify or Highlight.js (the chosen
                package will be a part of the tool chain)
                
                Because of the intended use, the language attribute is required. 
                
                Class and ID (from genericPropertiesGroup) are optional
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="language" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="para">
        <xs:annotation>
            <xs:documentation>Para is the essential text content element. It'll get hairy because we
                have a lot of possible attributes we can use on it</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:choice  minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        Style, Link and Span Elements. 
                        
                        We use strong and emphasis rather than bold and italics
                        to try and stay in synch with HTML and HTML5. We may add additional tags
                        later in the process.
                        
                        We can use any of these elements inside paragraph in no particular order 
                        0 or more times (no maximum)
                        
                        Researching how to handle nested styles and whether the model below 
                        would handle nested children
                    </xs:documentation>
                </xs:annotation>
                <xs:element ref="strong"/>
                <xs:element ref="emphasis"/>
                <xs:element ref="underline"/>
                <xs:element ref="strike"/>
                <xs:element ref="link"/>
            </xs:choice>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
        </xs:complexType>
    </xs:element>

    <!-- Metadata element -->
    <xs:element name="metadata">
        <xs:annotation>
            <xs:documentation>Metadata section of the content. Still debating whether to move it inside section or leave it as a separate part.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:annotation>
                    <xs:documentation>Metadata sequence using ISBN, Edition, Title, Authors, Editors and Other Roles defined using simple and complex type definitions defined earlier</xs:documentation>
                </xs:annotation>
                <xs:element name="isbn" type="isbn"/>
                <xs:element name="edition" type="xs:integer"/>
                <xs:element name="title" type="token255"/>
                <xs:element name="authors" type="authors" minOccurs="1" maxOccurs="unbounded"/>
                <xs:element name="editors" type="editors" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="otherRoles" type="otherRoles" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="section">
        <xs:annotation>
            <xs:documentation>section structure</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence>
                <xs:annotation>
                    <xs:documentation>A title and at least one paragraph </xs:documentation>
                </xs:annotation>
                <xs:element name="title" type="xs:token" minOccurs="1" maxOccurs="1"/>
                <xs:element ref="para" minOccurs="1" maxOccurs="unbounded"/>                
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:element ref="image"/>
                    <xs:element ref="code"/>
                    <xs:element ref="list"/>
                </xs:choice>
            </xs:sequence>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
            <xs:attribute name="type" type="xs:token" use="optional" default="chapter">
                <xs:annotation>
                    <xs:documentation>
                        The type or role for the paragraph asn in data-role or epub:type. 
                        
                        We make it optional but provide a default of chapter to make it 
                        easier to add.
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="book">
        <xs:annotation>
            <xs:documentation>The main book element and it's children</xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:annotation>
                <xs:documentation>A sequence of one metadat section followed by 1 or more sections</xs:documentation>
            </xs:annotation>
            <xs:sequence>
                <xs:element ref="metadata" minOccurs="1" maxOccurs="1"/>
                <xs:element ref="section" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:attributeGroup ref="genericPropertiesGroup"/>
        </xs:complexType>
    </xs:element>
</xs:schema>